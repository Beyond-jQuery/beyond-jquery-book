# Preface

Back in 2010, I abruptly and unexpectedly moved into professional web application development. My background, up to that point, was almost exclusively dedicated to the server. User interfaces were developed using Java Applets or Swing. I spent most of my time writing Java code, without much interest in the web. That all changed when I joined a project in Avid's broadcast division. It was to be our first web offering, [a multi-role media production tool codenamed "Jennings" (now known as MediaCentral UX)][mediacentral-ux].

Jennings was my first _real_ web project. Sure, I dabbled in the web before, but never created anything particularly interesting or useful. I wasn't alone though, many others on the team came from a similar place. Jennings had some lofty goals, and there was little time to get up to speed on all things web. As a result, I spent a negligible amount of time brushing up on JavaScript, HTML, and CSS. An alternative, it seemed at the time, was to simply embrace jQuery. I managed to stumble though my tasks, leaning on jQuery the whole way through. But I can remember a number of instances where the warm blanket of jQuery was unexpectedly yanked off, and I was forced to deal directly with the web API and JavaScript. I doubt I even knew _what_ the web API was at the time.

Over the course of the next year, it became clear that substantial gaps in my knowledge had formed as a result of the shortcuts I took. I learned a library instead of learning the fundamentals first. I felt anchored to jQuery, as I didn't posses the knowledge to develop much of anything web-based without it. Perhaps I was just a bad developer. Surely other developers were smarter, and took the proper path. But my discussions with others through the years put this assumption to rest. Indeed, my experience was all too common. Even today, just browsing the jQuery questions on Stack Overflow suggests that this backwards approach is still the status quo.

Shortly before I left Avid in early 2011, I promised myself that I would never be confounded by the browser or JavaScript again. I pressed a figurative "reset" button, and began to learn web development through a strict study of the fundamentals. I didn't abandon jQuery during this process. In fact, I studied jQuery just as closely, and not just its API, but its code, design, and purpose. I began to develop small libraries, first jQuery plug-ins, then small dependency-free libraries. And then, In 2012, I became the sole maintainer and developer of Fine Uploader, a large cross-browser no-dependency file upload library. I spent years re-developing Fine Uploader, and other libraries, honing my understanding of the web API and JavaScript.

At some point, after helping a number of developers to better understand the browser _and_ JavaScript, I decided to begin sharing my knowledge by writing. My target audience mostly mirrored a younger me, early on in my web development career. I aimed to educate more experienced developers as well. Out of this desire came a series of blog posts titled ["You Don't Need jQuery!"][ydnjq]. In this six post series, I covered element selectors, DOM manipulation, ajax requests, event handling and common utility functions. The overarching goal was to show developers how to solve a number of common problems _without_ jQuery. While "You Don't Need jQuery!" was popular, it was also a bit controversial. There were mostly positive responses to the information contained in my posts, though clearly a number of developers with heavy attachments to the library were offended. One even claimed that the title was "condescending". I had struck a nerve.

The heavy response to my blog meant that my message was important. It seemed clear that the web development community _needed_ something like this. Hell, I even wished I had come across something similar when I was getting started. Quite a few developers were excited at the possibilities of Life After jQuery. Their newfound knowledge empowered them, and this was ultimately my goal. The blog was translated into Chinese and Portuguese, so clearly the audience was not limited to my home country. The desire to learn about the web outside of the lens of jQuery spanned the world.

I originally planned to create another series of blog posts, this time based on cross-domain browser-based communication, another field in which I posses a good deal of knowledge. But, it occurred to me that I had more to say on the topic of jQuery, the web API, and JavaScript. Perhaps if I took some time to expand on this message, even more developers would benefit. Something long-form, perhaps a book, seemed like the next logical step, and "Beyond jQuery" was born.


[mediacentral-ux]: https://www.avid.com/US/products/MediaCentral-UX
[ydnjq]: http://dont-need-jquery.raynicholus.com